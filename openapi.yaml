openapi: 3.0.0
info:
  title: trips Api
  description: a service to provide unique trip identifiers
  contact:
    name: seth gerou
    url: nwfsc.noaa.gov
    email: seth.gerou@noaa.gov
  version: 0.0.1
servers:
- url: https://virtserver.swaggerhub.com/seth.gerou/Trips/0.0.1
  description: SwaggerHub API Auto Mocking
tags:
- name: Trips
  description: all trips
- name: Trip
  description: an individual trip
paths:
  /login:
    post:
      tags:
      - Login
      summary: Perform login to get JWT token
      operationId: postLogin
      requestBody:
        description: Need username and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
            examples:
              Encoded:
                value:
                  username: test
                  passwordEnc: dGVzdA==
                  applicationName: BOATNET_OBSERVER
              Basic:
                value:
                  username: test
                  password: test
        required: true
      responses:
        "200":
          description: User Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
              example:
                username: test
                token: (JWT Token - decode at jwt.io)
        "401":
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              example:
                status: 401
                message: You have not been granted access to this application.
  /tripCatch/{tripNum}:
    get:
      tags:
      - Catch
      summary: get catch for trip
      parameters:
      - name: tripNum
        in: path
        description: ID of desired trip catch
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "404":
          description: No data found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              example:
                status: 404
                message: Not Found
      security:
      - bearerAuth: []
    put:
      tags:
      - Catch
      description: update trip catch
      parameters:
      - name: tripNum
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripCatch'
        required: true
      responses:
        "200":
          description: update success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              example:
                status: 200
                message: catch data updated
        "400":
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              example:
                status: 400
                message: Invalid Request
      security:
      - bearerAuth: []
    post:
      tags:
      - Catch
      summary: submit catch an for existing trip
      parameters:
      - name: tripNum
        in: path
        description: trip Id for catch
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripCatch'
        required: true
      responses:
        "200":
          description: save success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              example:
                status: 200
                message: catch data saved
        "400":
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              example:
                status: 400
                message: Invalid Request
      security:
      - bearerAuth: []
  /trips/:
    get:
      tags:
      - Trips
      summary: get all trips
      parameters:
      - name: vesselId
        in: query
        description: all trips for a given vessel
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: captain
        in: query
        description: all trips for a given captain
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: port
        in: query
        description: trips starting or ending in specified port
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: fishery
        in: query
        description: trips in a given fishery
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "404":
          description: No data found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              example:
                status: 404
                message: Not Found
      security:
      - bearerAuth: []
    post:
      tags:
      - Trips
      summary: create a new trip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTrip'
        required: true
      responses:
        "200":
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "400":
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              example:
                status: 400
                message: Invalid Request
      security:
      - bearerAuth: []
  /trips/{tripNum}:
    get:
      tags:
      - Trip
      description: get an individual trip by trip num
      parameters:
      - name: tripNum
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: returned a valid trip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        "404":
          description: No data found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              example:
                status: 404
                message: Not Found
      security:
      - bearerAuth: []
    put:
      tags:
      - Trip
      description: update an individual trip
      parameters:
      - name: tripNum
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trip'
        required: true
      responses:
        "200":
          description: successfully edited an existing trip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        "400":
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              example:
                status: 400
                message: Invalid Request
      security:
      - bearerAuth: []
components:
  schemas:
    Login:
      required:
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          description: Required if passwordEnc not specified
        passwordEnc:
          type: string
          description: Required if password not specified
        applicationName:
          type: string
          description: Application name, determines which roles are returned in JWT
          default: BOATNET_OBSERVER
    TripCatch:
      required:
      - hauls
      - source
      - tripId
      type: object
      properties:
        tripId:
          type: number
        source:
          type: string
        hauls:
          type: array
          items:
            $ref: '#/components/schemas/Haul'
        fishTickets:
          type: array
          items:
            type: string
        createdBy:
          type: string
        createdDate:
          type: string
        updatedBy:
          type: string
        updatedDate:
          type: string
    Haul:
      required:
      - date
      - haulNum
      - setLoc
      - setTime
      - upLoc
      - upTime
      type: object
      properties:
        haulNum:
          type: number
        date:
          type: string
        setTime:
          type: string
        setLoc:
          type: string
        upTime:
          type: string
        upLoc:
          type: string
        avgDepth:
          type: number
        netType:
          type: string
        targetStrategy:
          type: string
        catch:
          type: array
          items:
            $ref: '#/components/schemas/Catch'
    Catch:
      required:
      - discard
      - speciesName
      properties:
        speciesName:
          type: string
        retained:
          type: number
        discard:
          type: number
    Trip:
      required:
      - departureDate
      - returnDate
      - vesselId
      type: object
      properties:
        tripId:
          type: number
        vesselId:
          type: string
        vesselName:
          type: string
        departurePort:
          type: string
        returnPort:
          type: string
        departureDate:
          type: string
        returnDate:
          type: string
        fisheries:
          type: array
          items:
            type: string
        permits:
          type: array
          items:
            type: string
        captain:
          type: string
        createdBy:
          type: string
        createdDate:
          type: string
        updatedBy:
          type: string
        updatedDate:
          type: string
    NewTrip:
      required:
      - departureDate
      - returnDate
      - vesselId
      type: object
      properties:
        vesselId:
          type: string
        vesselName:
          type: string
        departurePort:
          type: string
        returnPort:
          type: string
        departureDate:
          type: string
        returnDate:
          type: string
        fisheries:
          type: array
          items:
            type: string
        permits:
          type: array
          items:
            type: string
        captain:
          type: string
        createdBy:
          type: string
        createdDate:
          type: string
        updatedBy:
          type: string
        updatedDate:
          type: string
    inline_response_200:
      type: object
      properties:
        username:
          type: string
        token:
          type: string
          description: JWT encoded token
    inline_response_401:
      type: object
      properties:
        status:
          type: integer
          format: int64
        message:
          type: string
    inline_response_200_1:
      type: object
      properties:
        tripCatch:
          $ref: '#/components/schemas/TripCatch'
    inline_response_200_2:
      type: object
      properties:
        trip:
          $ref: '#/components/schemas/Trip'
    inline_response_200_3:
      type: object
      properties:
        tripID:
          type: integer
        trip:
          type: object
    inline_response_200_4:
      type: object
      properties:
        vesselId:
          type: string
        vesselName:
          type: string
        startPort:
          type: string
  responses:
    NotFoundError:
      description: No data found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_401'
          example:
            status: 404
            message: Not Found
    InvalidRequestError:
      description: Invalid Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_401'
          example:
            status: 400
            message: Invalid Request
    CatchDataSaved:
      description: save success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_401'
          example:
            status: 200
            message: catch data saved
    CatchDataUpdated:
      description: update success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_401'
          example:
            status: 200
            message: catch data updated
